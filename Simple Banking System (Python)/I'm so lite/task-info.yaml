type: edu
files:
- name: banking/banking.py
  visible: true
  text: |
    import random
    import sqlite3

    # Connect to the SQLite database
    conn = sqlite3.connect("card_numbers.db")
    cursor = conn.cursor()
    # Create a table to store card numbers and PIN codes
    cursor.execute("CREATE TABLE IF NOT EXISTS card_info (card_number TEXT PRIMARY KEY, pin TEXT)")

    def card_number_exists(card_number):
        cursor.execute("SELECT COUNT(*) FROM card_info WHERE card_number=?", (card_number,))
        return cursor.fetchone()[0] > 0

    def login(card_number, pin):
        cursor.execute("SELECT COUNT(*) FROM card_info WHERE card_number=? AND pin=?", (card_number, pin))
        return cursor.fetchone()[0] > 0


    def calculate_checksum(card_number_str):
        checksum = 0
        for i in range(len(card_number_str)):
            digit = int(card_number_str[i])
            if i % 2 == 0:
                doubled_digit = digit * 2
                if doubled_digit > 9:
                    doubled_digit -= 9
                checksum += doubled_digit
            else:
                checksum += digit
        return (10 - checksum % 10) % 10

    def update_card_number(card_number):
        card_number_str = str(card_number)[:-1]  # Exclude the last digit
        checksum = calculate_checksum(card_number_str)
        return checksum



    flag = 0
    while True:
        if flag == 1:
            break
        else:
            print("1. Create an account")
            print("2. Log into account")
            print("0. Exit")

            choice = int(input())

            if choice == 1:
                first_six_digits = "400000"
                last_digit = "3"  # Updated the last digit to 3

                # Generate the unique 9-digit number for the card
                unique_digits = "".join(str(random.randint(0, 9)) for _ in range(9))
                card_number = f"{first_six_digits}{unique_digits}{last_digit}"

                # Check if the card number already exists in the database
                while card_number_exists(card_number):
                    unique_digits = "".join(str(random.randint(0, 9)) for _ in range(9))
                    card_number = f"{first_six_digits}{unique_digits}{last_digit}"

                # Calculate the new checksum
                checksum = update_card_number(card_number)

                # Update the last digit to satisfy the Luhn algorithm
                card_number = card_number[:-1] + str(checksum)

                # Insert the card number into the database
                cursor.execute("INSERT OR IGNORE INTO card_info (card_number, pin) VALUES (?, ?)", (card_number, None))
                conn.commit()

                # Generate 4-digit PIN codes for the card
                pin = f"{random.randint(0, 9999):04d}"  # Generate a 4-digit PIN code (from 0000 to 9999)

                # Insert the PIN code into the database for the corresponding card number
                cursor.execute("UPDATE card_info SET pin=? WHERE card_number=?", (pin, card_number))
                conn.commit()

                # Output the card details
                print("Your card has been created")
                print("Your card number:")
                print(card_number)
                print("Your card PIN:")
                print(pin)

            elif choice == 2:
                card_number_ans = input("Enter your card number:")
                pin_card_ans = input("Enter your PIN:")
                cursor.execute("SELECT card_number, pin FROM card_info WHERE card_number=? AND pin=?", (card_number_ans, pin_card_ans))
                row = cursor.fetchone()

                if row is not None:
                    print()
                    print("You have successfully logged in!")
                    print()

                    while True:
                        if flag == 1:
                            break
                        else:
                            print("1. Balance")
                            print("2. Log out")
                            print("0. Exit")

                            choice = int(input())

                            if choice == 1:
                                print()
                                print("Balance: 0")
                                print()
                            elif choice == 2:
                                print()
                                print("You have successfully logged out!\n")
                                flag = 1
                                break
                            else:
                                print("Bye!\n")
                                flag = 1
                                break
                else:
                    print()
                    print("Wrong card number or PIN!")
                    print()

            else:
                print("Bye!")
                break

    # Close the database connection
    conn.close()
  learner_created: false
- name: test/__init__.py
  visible: false
  learner_created: false
- name: test/tests.py
  visible: false
  text: |
    from hstest.exceptions import WrongAnswer
    from hstest.test_case import CheckResult
    from hstest.stage_test import StageTest
    from hstest.test_case import TestCase
    from shutil import copy2
    import os
    import sqlite3
    import random
    import re

    card_number = ''
    pin = ''
    are_all_inputs_read = False
    db_file_name = 'card.s3db'
    temp_db_file_name = 'temp.s3db'


    def get_credentials(output: str):
        number = re.findall(r'^400000\d{10}$', output, re.MULTILINE)
        if not number:
            raise WrongAnswer('You are printing the card number incorrectly. '
                                       'The card number should look like in the example: 400000DDDDDDDDDD,'
                                       ' where D is a digit.\nMake sure the card number is 16-digit length and '
                                       'you don\'t print any extra spaces at the end of the line!')

        PIN = re.findall(r'^\d{4}$', output, re.MULTILINE)
        if not PIN:
            raise WrongAnswer('You are printing the card PIN incorrectly. '
                                       'The PIN should look like in the example: DDDD, where D is a digit.\n'
                                       'Make sure the PIN is 4-digit length and you don\'t print any extra spaces at the'
                                       ' end of the line!')

        return number[0], PIN[0]


    def test_card_generation(output: str, value_to_return):
        global card_number, pin, are_all_inputs_read
        are_all_inputs_read = False
        credentials = get_credentials(output)
        card_number = credentials[0]
        pin = credentials[1]
        return value_to_return


    def test_difference_between_generations(output: str, value_to_return):
        global card_number, pin, are_all_inputs_read
        credentials = get_credentials(output)
        another_card_number = credentials[0]

        if another_card_number == card_number:
            return CheckResult.wrong('Your program generates two identical card numbers!')
        are_all_inputs_read = True

        return value_to_return


    def test_sign_in_with_correct_credentials(output: str, value_to_return):
        global card_number, pin
        return '{}\n{}'.format(card_number, pin)


    def test_output_after_correct_sign_in(output: str, value_to_return):
        global are_all_inputs_read
        are_all_inputs_read = True
        if 'successfully' not in output.lower():
            return CheckResult.wrong(
                'There is no \'successfully\' in your output after signing in with correct credentials')
        return value_to_return


    def test_sign_in_with_wrong_pin(output: str, value_to_return):
        global card_number, pin
        wrong_pin = pin
        while pin == wrong_pin:
            wrong_pin = ''.join(list(map(str, random.sample(range(1, 10), 4))))
        return '{}\n{}\n'.format(card_number, wrong_pin)


    def test_output_after_wrong_pin(output: str, value_to_return):
        global are_all_inputs_read
        are_all_inputs_read = True
        if 'wrong' not in output.lower():
            return CheckResult.wrong(
                'There is no \'wrong\' in your output after signing in with incorrect credentials')
        return value_to_return


    def test_sign_in_with_wrong_card_number(output: str, value_to_return):
        global card_number, pin
        wrong_card_number = card_number
        while wrong_card_number == card_number:
            temp = [4, 0, 0, 0, 0, 0]
            for _ in range(10):
                temp.append(random.randint(1, 9))
            wrong_card_number = ''.join(list(map(str, temp)))
        return '{}\n{}\n'.format(wrong_card_number, pin)


    def test_output_after_wrong_card_number(output: str, value_to_return):
        global are_all_inputs_read
        are_all_inputs_read = True
        if 'wrong' not in output.lower():
            return CheckResult.wrong(
                'There is no \'wrong\' in your output after signing in with incorrect credentials')
        return value_to_return


    def is_passed_luhn_algorithm(number):
        luhn = [int(char) for char in str(number)]
        for i, num in enumerate(luhn):
            if (i + 1) % 2 == 0:
                continue
            temp = num * 2
            luhn[i] = temp if temp < 10 else temp - 9
        return sum(luhn) % 10 == 0


    def test_luhn_algorithm(output: str, correct_num_of_cards):
        global are_all_inputs_read

        numbers = re.findall(r'400000\d{10,}', output, re.MULTILINE)

        for number in numbers:
            if len(number) != 16:
                return CheckResult.wrong(f'Wrong card number \'{number}\'. The card number should be 16-digit length.')
            if not is_passed_luhn_algorithm(number):
                return CheckResult.wrong('The card number \'{}\' doesn\'t pass luhn algorithm!'.format(number))

        if len(numbers) != correct_num_of_cards:
            return CheckResult.wrong(
                f'After creating {correct_num_of_cards} cards, found {len(numbers)} cards with correct format\n'
                f'The card number should be 16-digit length and should start with 400000.')

        are_all_inputs_read = True
        return '0'


    def check_db(output: str, value_to_return):
        if not os.path.exists(db_file_name):
            return CheckResult.wrong('Can\'t find db file named \'{}\''.format(db_file_name))
        try:
            copy2(db_file_name, temp_db_file_name)
        except Exception:
            return CheckResult.wrong('Can\'t copy database file!')

        try:
            with sqlite3.connect(db_file_name) as db:
                response = db.execute(
                    'SELECT name FROM sqlite_master WHERE type = \'table\' AND name NOT LIKE \'sqlite_%\';')
                for _ in response.fetchall():
                    if 'card' in _:
                        break
                else:
                    return CheckResult.wrong('Your database doesn\'t have a table named \'card\'')
        except Exception as exp:
            return CheckResult.wrong('Can\'t connect to the database!')

        correct_columns = (('ID', 'INTEGER'), ('NUMBER', 'TEXT'), ('PIN', 'TEXT'), ('BALANCE', 'INTEGER'))

        try:
            with sqlite3.connect(db_file_name) as db:
                response = db.execute('PRAGMA table_info(card);')
                real_columns = response.fetchall()
                for correct_column in correct_columns:
                    for real_column in real_columns:
                        real_column = [str(element).upper() for element in real_column]
                        if correct_column[0] in real_column and correct_column[1] in real_column:
                            break
                    else:
                        return CheckResult.wrong(
                            f'Can\'t find column named \'{correct_column[0].lower()}\' with \'{correct_column[1]}\' type.\n'
                            'Your table should have columns described in the stage instructions.')
        except Exception as ignored:
            return CheckResult.wrong('Can\'t connect to the database!')

        return CheckResult.correct()


    def check_db_rows(output, attach):
        correct_num_of_cards = 10
        numbers = re.findall(r'400000\d{10,}', output, re.MULTILINE)

        for number in numbers:
            if len(number) != 16:
                return CheckResult.wrong(f'Wrong card number \'{number}\'. The card number should be 16-digit length.')
            if not is_passed_luhn_algorithm(number):
                return CheckResult.wrong('The card number \'{}\' doesn\'t pass luhn algorithm!'.format(number))

        if len(numbers) != correct_num_of_cards:
            return CheckResult.wrong(
                f'After creating {correct_num_of_cards} cards, found {len(numbers)} cards with correct format\n'
                f'The card number should be 16-digit length and should start with 400000.')

        with sqlite3.connect(db_file_name) as db:
            rows = db.execute('SELECT * FROM card').fetchall()
            for number in numbers:
                if len(number) != 16:
                    return CheckResult.wrong(f'Wrong card number \'{number}\'. The card number should be 16-digit length.')
                for row in rows:
                    if number in row:
                        break
                else:
                    return CheckResult.wrong('Your database doesn’t save newly created cards.\n'
                                             'Make sure you commit your DB changes right after saving a new card in the database!')
        return CheckResult.correct()


    class BankingSystem(StageTest):

        def generate(self):
            return [
                TestCase(
                    stdin='0',
                    check_function=check_db,
                ),
                TestCase(
                    stdin=[
                        '1',
                        lambda output: test_card_generation(output, '1'),
                        lambda output: test_difference_between_generations(output, '0')
                    ]),
                TestCase(
                    stdin=[
                        '1\n1\n1\n1\n1\n1\n1\n1',
                        lambda output: test_luhn_algorithm(output, 8),
                    ]),
                TestCase(
                    stdin='1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n0',
                    check_function=check_db_rows
                ),
                TestCase(
                    stdin=[
                        '1',
                        lambda output: test_card_generation(output, '2'),
                        lambda output: test_sign_in_with_correct_credentials(output, None),
                        lambda output: test_output_after_correct_sign_in(output, '0')
                    ]),
                TestCase(
                    stdin=[
                        '1',
                        lambda output: test_card_generation(output, '2'),
                        lambda output: test_sign_in_with_wrong_pin(output, None),
                        lambda output: test_output_after_wrong_pin(output, '0')
                    ]),
                TestCase(
                    stdin=[
                        '1',
                        lambda output: test_card_generation(output, '2'),
                        lambda output: test_sign_in_with_wrong_card_number(output, None),
                        lambda output: test_output_after_wrong_card_number(output, '0')
                    ])
            ]

        def check(self, reply: str, attach) -> CheckResult:
            if are_all_inputs_read:
                return CheckResult.correct()
            else:
                return CheckResult.wrong('You didn\'t read all inputs!')

        def after_all_tests(self):
            if os.path.exists('temp.s3db'):
                copy2('temp.s3db', 'card.s3db')
                os.remove('temp.s3db')


    if __name__ == '__main__':
        BankingSystem('banking.banking').run_tests()
  learner_created: false
- name: tests.py
  visible: false
  text: |-
    from test.tests import BankingSystem

    if __name__ == '__main__':    BankingSystem('banking.banking').run_tests()
  learner_created: false
feedback_link: https://hyperskill.org/projects/109/stages/593/implement#comment
status: Solved
record: 3
